#    "$Name:  $";
#    "$Header:  $";
#=============================================================================
#
# file :        NXSRecSelector.py
#
# description : Python source for the NXSRecSelector and its commands.
#                The class is derived from Device. It represents the
#                CORBA servant object which will be accessed from the
#                network. All commands which can be executed on the
#                NXSRecSelector are implemented in this file.
#
# project :     TANGO Device Server
#
# $Author:  $
#
# $Revision:  $
#
# $Log:  $
#
# copyleft :    European Synchrotron Radiation Facility
#               BP 220, Grenoble 38043
#               FRANCE
#
#=============================================================================
#          This file is generated by POGO
#    (Program Obviously used to Generate tango Object)
#
#         (c) - Software Engineering Group - ESRF
#=============================================================================
#

""" Selector Server for NeXus Sardana Recorder """

import PyTango


#==================================================================
#   NXSRecSelector Class Description:
#
#         Tango Server for Nexus Sardana Recorder Settings
#
#==================================================================
#     Device States Description:
#
#   DevState.ON :   Server is ON
#   DevState.RUNNING : Performing a query
#==================================================================


from .Settings import Settings as STG


## NXSRecSelector server interface
class NXSRecSelector(PyTango.Device_4Impl):

#--------- Add you global variables here --------------------------

#------------------------------------------------------------------
#    Device constructor
#------------------------------------------------------------------
    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self, cl, name)
        ## Recorder Settings
        self.__stg = STG(self)
        NXSRecSelector.init_device(self)

#------------------------------------------------------------------
#    Device destructor
#------------------------------------------------------------------
    def delete_device(self):
        print >> self.log_info, "[Device delete_device method] for device", \
            self.get_name()
        if hasattr(self, 'stg') and self.__stg:
            del self.__stg
            self.__stg = None
        self.set_state(PyTango.DevState.OFF)

#------------------------------------------------------------------
#    Device initialization
#------------------------------------------------------------------
    def init_device(self):
        print >> self.log_info, "In ", self.get_name(), "::init_device()"
        if hasattr(self, 'stg') and self.__stg:
            del self.__stg
            self.__stg = None
        self.__stg = STG(self)
        self.set_state(PyTango.DevState.ON)
        self.get_device_properties(self.get_device_class())

        self.__stg.poolBlacklist = self.PoolBlacklist \
            if self.PoolBlacklist else []

#------------------------------------------------------------------
#    Always excuted hook method
#------------------------------------------------------------------
    def always_executed_hook(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::always_excuted_hook()"

#==================================================================
#
#    NXSRecSelector read/write attribute methods
#
#==================================================================
#------------------------------------------------------------------
#    Read Attribute Hardware
#------------------------------------------------------------------
    def read_attr_hardware(self, _):
        print >> self.log_info, "In ", self.get_name(), \
            "::read_attr_hardware()"

#------------------------------------------------------------------
#    Read Components attribute
#------------------------------------------------------------------
    def read_Components(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_Components()"
        attr.set_value(self.__stg.components)

#------------------------------------------------------------------
#    Read Timer attribute
#------------------------------------------------------------------
    def read_Timer(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_Timer()"
        attr.set_value(self.__stg.timer)

#------------------------------------------------------------------
#    Write Timer attribute
#------------------------------------------------------------------
    def write_Timer(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_Timer()"
        self.__stg.timer = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % self.__stg.timer

#------------------------------------------------------------------
#    Read ComponentGroup attribute
#------------------------------------------------------------------
    def read_ComponentGroup(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::read_ComponentGroup()"
        attr.set_value(self.__stg.componentGroup)

#------------------------------------------------------------------
#    Write ComponentGroup attribute
#------------------------------------------------------------------
    def write_ComponentGroup(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::write_ComponentGroup()"
        self.__stg.componentGroup = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % \
            self.__stg.componentGroup

#------------------------------------------------------------------
#    Read AutomaticComponentGroup attribute
#------------------------------------------------------------------
    def read_AutomaticComponentGroup(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::read_AutomaticComponentGroup()"
        attr.set_value(self.__stg.automaticComponentGroup)

#------------------------------------------------------------------
#    Write AutomaticComponentGroup attribute
#------------------------------------------------------------------
    def write_AutomaticComponentGroup(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::write_AutomaticComponentGroup()"
        self.__stg.automaticComponentGroup = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % \
            self.__stg.automaticComponentGroup

#------------------------------------------------------------------
#    Read AutomaticComponents attribute
#------------------------------------------------------------------
    def read_AutomaticComponents(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::read_AutomaticComponents()"
        attr.set_value(self.__stg.automaticComponents)

#------------------------------------------------------------------
#    Read OptionalComponents attribute
#------------------------------------------------------------------
    def read_OptionalComponents(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::read_OptionalComponents()"
        attr.set_value(self.__stg.optionalComponents)

#------------------------------------------------------------------
#    Write OptionalComponents attribute
#------------------------------------------------------------------
    def write_OptionalComponents(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::write_OptionalComponents()"
        self.__stg.optionalComponents = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % \
            self.__stg.optionalComponents

#------------------------------------------------------------------
#    Read MacroServer attribute
#------------------------------------------------------------------
    def read_MacroServer(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::read_MacroServer()"
        attr.set_value(self.__stg.macroServer)

#------------------------------------------------------------------
#    Read Door attribute
#------------------------------------------------------------------
    def read_Door(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::read_Door()"
        attr.set_value(self.__stg.door)

#------------------------------------------------------------------
#    Write Door attribute
#------------------------------------------------------------------
    def write_Door(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_Door()"
        self.__stg.door = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % self.__stg.door

#------------------------------------------------------------------
#    Read STEPDataSources attribute
#------------------------------------------------------------------
    def read_STEPDataSources(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::read_STEPDataSources()"
        attr.set_value(self.__stg.stepdatasources)

#------------------------------------------------------------------
#    Write STEPDataSources attribute
#------------------------------------------------------------------
    def write_STEPDataSources(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::write_STEPDataSources()"
        if self.is_STEPDataSources_write_allowed():
            self.__stg.stepdatasources = attr.get_write_value()
            print >> self.log_info, "Attribute value = ", \
                self.__stg.stepdatasources
        else:
            print >> self.log_warn, \
                "To change the settings please close the server."
            raise Exception(
                "To change the settings please close the server.")

#---- STEPDataSources attribute Write State Machine -----------------
    def is_STEPDataSources_write_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

#------------------------------------------------------------------
#    Read ConfigDevice attribute
#------------------------------------------------------------------
    def read_ConfigDevice(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::read_ConfigDevice()"
        attr.set_value(self.__stg.configDevice)

#------------------------------------------------------------------
#    Write ConfigDevice attribute
#------------------------------------------------------------------
    def write_ConfigDevice(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::write_ConfigDevice()"
        self.__stg.configDevice = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % \
            self.__stg.configDevice

#------------------------------------------------------------------
#    Read MntGrp attribute
#------------------------------------------------------------------
    def read_MntGrp(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_MntGrp()"
        attr.set_value(self.__stg.mntGrp)

#------------------------------------------------------------------
#    Write MntGrp attribute
#------------------------------------------------------------------
    def write_MntGrp(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_MntGrp()"
        self.__stg.mntGrp = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % self.__stg.mntGrp

#------------------------------------------------------------------
#    Read ScanDir attribute
#------------------------------------------------------------------
    def read_ScanDir(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_ScanDir()"
        attr.set_value(self.__stg.scanDir)

#------------------------------------------------------------------
#    Write ScanDir attribute
#------------------------------------------------------------------
    def write_ScanDir(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_ScanDir()"
        self.__stg.scanDir = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % self.__stg.scanDir

#------------------------------------------------------------------
#    Read ScanFile attribute
#------------------------------------------------------------------
    def read_ScanFile(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_ScanFile()"
        attr.set_value(self.__stg.scanFile)

#------------------------------------------------------------------
#    Write ScanFile attribute
#------------------------------------------------------------------
    def write_ScanFile(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_ScanFile()"
        self.__stg.scanFile = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % self.__stg.scanFile

#------------------------------------------------------------------
#    Read ScanID attribute
#------------------------------------------------------------------
    def read_ScanID(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_ScanID()"
        attr.set_value(self.__stg.scanID)

#------------------------------------------------------------------
#    Write ScanID attribute
#------------------------------------------------------------------
    def write_ScanID(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_ScanID()"
        self.__stg.scanID = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % self.__stg.scanID

#------------------------------------------------------------------
#    Read WriterDevice attribute
#------------------------------------------------------------------
    def read_WriterDevice(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_WriterDevice()"
        attr.set_value(self.__stg.writerDevice)

#------------------------------------------------------------------
#    Write WriterDevice attribute
#------------------------------------------------------------------
    def write_WriterDevice(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::write_WriterDevice()"
        self.__stg.writerDevice = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" \
            % self.__stg.writerDevice

#------------------------------------------------------------------
#    Read DataRecord attribute
#------------------------------------------------------------------
    def read_DataRecord(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_DataRecord()"
        attr.set_value(self.__stg.dataRecord)

#------------------------------------------------------------------
#    Write DataRecord attribute
#------------------------------------------------------------------
    def write_DataRecord(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_DataRecord()"
        self.__stg.dataRecord = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % \
            self.__stg.dataRecord

#------------------------------------------------------------------
#    Read LabelPaths attribute
#------------------------------------------------------------------
    def read_LabelPaths(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_LabelPaths()"
        attr.set_value(self.__stg.labelPaths)

#------------------------------------------------------------------
#    Write LabelPaths attribute
#------------------------------------------------------------------
    def write_LabelPaths(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_LabelPaths()"
        self.__stg.labelPaths = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % \
            self.__stg.labelPaths

#------------------------------------------------------------------
#    Read LabelTypes attribute
#------------------------------------------------------------------
    def read_LabelTypes(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_LabelTypes()"
        attr.set_value(self.__stg.labelTypes)

#------------------------------------------------------------------
#    Write LabelTypes attribute
#------------------------------------------------------------------
    def write_LabelTypes(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_LabelTypes()"
        self.__stg.labelTypes = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % \
            self.__stg.labelTypes

#------------------------------------------------------------------
#    Read LabelShapes attribute
#------------------------------------------------------------------
    def read_LabelShapes(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_LabelShapes()"
        attr.set_value(self.__stg.labelShapes)

#------------------------------------------------------------------
#    Write LabelShapes attribute
#------------------------------------------------------------------
    def write_LabelShapes(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::write_LabelShapes()"
        self.__stg.labelShapes = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % \
            self.__stg.labelShapes

#------------------------------------------------------------------
#    Read LabelLinks attribute
#------------------------------------------------------------------
    def read_LabelLinks(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::read_LabelLinks()"
        attr.set_value(self.__stg.labelLinks)

#------------------------------------------------------------------
#    Write LabelLinks attribute
#------------------------------------------------------------------
    def write_LabelLinks(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::write_LabelLinks()"
        self.__stg.labelLinks = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % \
            self.__stg.labelLinks

#------------------------------------------------------------------
#    Read HiddenElements attribute
#------------------------------------------------------------------
    def read_HiddenElements(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::read_HiddenElements()"
        attr.set_value(self.__stg.hiddenElements)

#------------------------------------------------------------------
#    Write HiddenElements attribute
#------------------------------------------------------------------
    def write_HiddenElements(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::write_HiddenElements()"
        self.__stg.hiddenElements = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % \
            self.__stg.hiddenElements

#------------------------------------------------------------------
#    Read Labels attribute
#------------------------------------------------------------------
    def read_Labels(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::read_Labels()"
        attr.set_value(self.__stg.labels)

#------------------------------------------------------------------
#    Write Labels attribute
#------------------------------------------------------------------
    def write_Labels(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::write_Labels()"
        self.__stg.labels = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % \
            self.__stg.labels

#------------------------------------------------------------------
#    Read DataSources attribute
#------------------------------------------------------------------
    def read_DataSources(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::read_DataSources()"
        attr.set_value(self.__stg.dataSources)

#------------------------------------------------------------------
#    Read AvailableTimers attribute
#------------------------------------------------------------------
    def read_AvailableTimers(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::read_AvailableTimers()"
        attr.set_value(self.__stg.availableTimers)

#------------------------------------------------------------------
#    Read Description attribute
#------------------------------------------------------------------
    def read_Description(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_Description()"
        attr.set_value(self.__stg.description)

#------------------------------------------------------------------
#    Read VariableComponents attribute
#------------------------------------------------------------------
    def read_VariableComponents(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::read_VariableComponents()"
        attr.set_value(self.__stg.variableComponents)

#------------------------------------------------------------------
#    Read FullDeviceNames attribute
#------------------------------------------------------------------
    def read_FullDeviceNames(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::read_FullDeviceNames()"
        attr.set_value(self.__stg.fullDeviceNames)

#------------------------------------------------------------------
#    Read DataSourceGroup attribute
#------------------------------------------------------------------
    def read_DataSourceGroup(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_DataSources()"
        attr.set_value(self.__stg.dataSourceGroup)

#------------------------------------------------------------------
#    Write DataSourceGroup attribute
#------------------------------------------------------------------
    def write_DataSourceGroup(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::write_DataSourceGroup()"
        self.__stg.dataSourceGroup = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % \
            self.__stg.dataSourceGroup

#------------------------------------------------------------------
#    Read Configuration attribute
#------------------------------------------------------------------
    def read_Configuration(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_DataSources()"
        attr.set_value(self.__stg.configuration)

#------------------------------------------------------------------
#    Write Configuration attribute
#------------------------------------------------------------------
    def write_Configuration(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::write_Configuration()"
        self.__stg.configuration = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % \
            self.__stg.configuration
#        try:
#            dp = PyTango.DeviceProxy(str(self.get_name()))
#            for var in self.__stg.names():
#                if hasattr(dp, var):
#                    dp.write_attribute(str(var), self.__stg.value(var))
#
#            self.set_state(PyTango.DevState.ON)
#        finally:
#            if self.get_state() == PyTango.DevState.RUNNING:
#                self.set_state(PyTango.DevState.ON)

#------------------------------------------------------------------
#    Read AutomaticDataSources attribute
#------------------------------------------------------------------
    def read_AutomaticDataSources(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::read_AutomaticDataSources()"
        attr.set_value(self.__stg.automaticDataSources)

#------------------------------------------------------------------
#    Write AutomaticDataSources attribute
#------------------------------------------------------------------
    def write_AutomaticDataSources(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::write_AutomaticDataSources()"
        self.__stg.automaticDataSources = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % \
            self.__stg.automaticDataSources

#------------------------------------------------------------------
#    Read DisableDataSources attribute
#------------------------------------------------------------------
    def read_DisableDataSources(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::read_DisableDataSources()"
        attr.set_value(self.__stg.disableDataSources)

#------------------------------------------------------------------
#    Read AppendEntry attribute
#------------------------------------------------------------------
    def read_AppendEntry(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_AppendEntry()"
        attr.set_value(self.__stg.appendEntry)

#------------------------------------------------------------------
#    Write AppendEntry attribute
#------------------------------------------------------------------
    def write_AppendEntry(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_AppendEntry()"
        self.__stg.appendEntry = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % \
            self.__stg.appendEntry

#------------------------------------------------------------------
#    Read ComponentsFromMntGrp attribute
#------------------------------------------------------------------
    def read_ComponentsFromMntGrp(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::read_ComponentsFromMntGrp()"
        attr.set_value(self.__stg.componentsFromMntGrp)

#------------------------------------------------------------------
#    Write ComponentsFromMntGrp attribute
#------------------------------------------------------------------
    def write_ComponentsFromMntGrp(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::write_ComponentsFromMntGrp()"
        self.__stg.componentsFromMntGrp = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % \
            self.__stg.componentsFromMntGrp

#------------------------------------------------------------------
#    Read DynamicComponents attribute
#------------------------------------------------------------------
    def read_DynamicComponents(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::read_DynamicComponents()"
        attr.set_value(self.__stg.dynamicComponents)

#------------------------------------------------------------------
#    Write DynamicComponents attribute
#------------------------------------------------------------------
    def write_DynamicComponents(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::write_DynamicComponents()"
        self.__stg.dynamicComponents = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % \
            self.__stg.dynamicComponents

#------------------------------------------------------------------
#    Read DynamicLinks attribute
#------------------------------------------------------------------
    def read_DynamicLinks(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::read_DynamicLinks()"
        attr.set_value(self.__stg.dynamicLinks)

#------------------------------------------------------------------
#    Write DynamicLinks attribute
#------------------------------------------------------------------
    def write_DynamicLinks(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::write_DynamicLinks()"
        self.__stg.dynamicLinks = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % \
            self.__stg.dynamicLinks

#------------------------------------------------------------------
#    Read DynamicPath attribute
#------------------------------------------------------------------
    def read_DynamicPath(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_DynamicPath()"
        attr.set_value(self.__stg.dynamicPath)

#------------------------------------------------------------------
#    Write DynamicPath attribute
#------------------------------------------------------------------
    def write_DynamicPath(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_DynamicPath()"
        self.__stg.dynamicPath = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % \
            self.__stg.dynamicPath

#------------------------------------------------------------------
#    Read ConfigVariables attribute
#------------------------------------------------------------------
    def read_ConfigVariables(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::read_ConfigVariables()"
        attr.set_value(self.__stg.configVariables)

#------------------------------------------------------------------
#    Write ConfigVariables attribute
#------------------------------------------------------------------
    def write_ConfigVariables(self, attr):
        print >> self.log_info, "In ", self.get_name(), \
            "::write_ConfigVariables()"
        self.__stg.configVariables = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % \
            self.__stg.configVariables

#------------------------------------------------------------------
#    Read ConfigFile attribute
#------------------------------------------------------------------
    def read_ConfigFile(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_ConfigFile()"
        attr.set_value(self.__stg.configFile)

#------------------------------------------------------------------
#    Write ConfigFile attribute
#------------------------------------------------------------------
    def write_ConfigFile(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_ConfigFile()"
        self.__stg.configFile = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % self.__stg.configFile

#------------------------------------------------------------------
#    Read TimeZone attribute
#------------------------------------------------------------------
    def read_TimeZone(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::read_TimeZone()"
        attr.set_value(self.__stg.timeZone)

#------------------------------------------------------------------
#    Write TimeZone attribute
#------------------------------------------------------------------
    def write_TimeZone(self, attr):
        print >> self.log_info, "In ", self.get_name(), "::write_TimeZone()"
        self.__stg.timeZone = attr.get_write_value()
        print >> self.log_info, "Attribute value = %s" % \
            self.__stg.timeZone

#==================================================================
#
#    NXSRecSelector command methods
#
#==================================================================

#------------------------------------------------------------------
#    LoadConfiguration command:
#
#    Description: Load server configuration
#
#------------------------------------------------------------------
    def LoadConfiguration(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::LoadConfiguration()"
        try:
            self.set_state(PyTango.DevState.RUNNING)
            self.__stg.loadConfiguration()

            ## updating memorized attributes
            dp = PyTango.DeviceProxy(str(self.get_name()))
            for var in self.__stg.names():
                if hasattr(dp, var):
                    dp.write_attribute(str(var), self.__stg.value(var))

            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

#---- LoadConfiguration command State Machine -----------------
    def is_LoadConfiguration_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

#------------------------------------------------------------------
#    LoadConfiguration command:
#
#    Description: Save server configuration
#
#------------------------------------------------------------------
    def SaveConfiguration(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::SaveConfiguration()"
        try:
            self.set_state(PyTango.DevState.RUNNING)
            self.__stg.saveConfiguration()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

#---- SaveConfiguration command State Machine -----------------
    def is_SaveConfiguration_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

#------------------------------------------------------------------
#    UpdateControllers:
#
#    Description: checks existing controllers of pools for
#        AutomaticDataSources
#
#------------------------------------------------------------------
    def UpdateControllers(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::UpdateControllers()"
        try:
            self.set_state(PyTango.DevState.RUNNING)
            self.__stg.updateControllers()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

#---- UpdateControllers command State Machine -----------------
    def is_UpdateControllers_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

#------------------------------------------------------------------
#    UpdateConfigVariables:
#
#    Description: sends ConfigVariables into ConfigServer
#        and updates serialno if appendEntry selected
#
#------------------------------------------------------------------
    def UpdateConfigVariables(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::UpdateConfigVariables()"
        try:
            self.set_state(PyTango.DevState.RUNNING)
            self.__stg.updateConfigVariables()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

#---- UpdateConfigVariables command State Machine -----------------
    def is_UpdateConfigVariables_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

#------------------------------------------------------------------
#    IsMntGrpChanged:
#
#    Description:  returns true if mntgrp was changed
#
#------------------------------------------------------------------
    def IsMntGrpChanged(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::IsMntGrpChanged()"
        try:
            self.set_state(PyTango.DevState.RUNNING)
            conf = bool(self.__stg.isMntGrpChanged())
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

        return conf

#---- IsMntGrpChanged command State Machine -----------------
    def is_IsMntGrpChanged_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

#------------------------------------------------------------------
#    MntGrpConfiguration:
#
#    Description:  returns mntgrp configuration
#
#------------------------------------------------------------------
    def MntGrpConfiguration(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::MntGrpConfiguration()"
        try:
            self.set_state(PyTango.DevState.RUNNING)
            conf = str(self.__stg.mntGrpConfiguration())
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

        return conf

#---- MntGrpConfiguration command State Machine -----------------
    def is_MntGrpConfiguration_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

#------------------------------------------------------------------
#    UpdateMntGrp:
#
#    Description: updates mntgrp configuration
#
#
#------------------------------------------------------------------
    def UpdateMntGrp(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::UpdateMntGrp()"
        try:
            self.set_state(PyTango.DevState.RUNNING)
            conf = str(self.__stg.updateMntGrp())
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

        return conf

#---- UpdateMntGrp command State Machine -----------------
    def is_UpdateMntGrp_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

#------------------------------------------------------------------
#    ImportMntGrp:
#
#    Description: imports active mntgrp configuration
#
#
#------------------------------------------------------------------
    def ImportMntGrp(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::ImportMntGrp()"
        try:
            self.set_state(PyTango.DevState.RUNNING)
            self.__stg.importMntGrp()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

#---- ImportMntGrp command State Machine -----------------
    def is_ImportMntGrp_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

#------------------------------------------------------------------
#    ImportAllEnv:
#
#    Description: imports all environment variables
#
#
#------------------------------------------------------------------
    def ImportAllEnv(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::ImportMntGrp()"
        try:
            self.set_state(PyTango.DevState.RUNNING)
            self.__stg.importAllEnv()

            ## updating memorized attributes
            dp = PyTango.DeviceProxy(str(self.get_name()))
            for var in self.__stg.names():
                if hasattr(dp, var):
                    dp.write_attribute(str(var), self.__stg.value(var))

            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

#---- ImportMntGrp command State Machine -----------------
    def is_ImportEnv_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

#------------------------------------------------------------------
#    ExportAllEnv:
#
#    Description: exports all environment variables
#
#
#------------------------------------------------------------------
    def ExportAllEnv(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::ExportMntGrp()"
        try:
            self.set_state(PyTango.DevState.RUNNING)
            self.__stg.exportAllEnv()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

#---- ExportMntGrp command State Machine -----------------
    def is_ExportEnv_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

#------------------------------------------------------------------
#    DataSourcePath command:
#
#    Description: Returns a NeXus path of a given datasource
#
#    argout: DevString    datasource name
#    argout: DevString    NeXus path
#------------------------------------------------------------------
    def DataSourcePath(self, argin):
        print >> self.log_info, "In ", self.get_name(), \
            "::DataSourcePath()"
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = str(self.__stg.dataSourcePath(argin))
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

        return argout

#---- AvailableComponents command State Machine -----------------
    def is_DataSourcePath_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

#------------------------------------------------------------------
#    FindMntGrp command:
#
#    Description: Returns a full name of the given measurement group
#
#    argout: DevString    mntgrp alias
#    argout: DevString    mntgrp full name
#------------------------------------------------------------------
    def FindMntGrp(self, argin):
        print >> self.log_info, "In ", self.get_name(), \
            "::FindMntGrp()"
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = str(self.__stg.findMntGrp(argin))
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

        return argout

#---- AvailableComponents command State Machine -----------------
    def is_FindMntGrp_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

#------------------------------------------------------------------
#    StoreEnvData command:
#
#    Description: Stores ScanDir, ScanFile and NeXusSelectorDevice
#                 in environment variables
#
#    argout: DevString    json dictionary with enviroutment data
#    argout: DevLong    scan ID
#------------------------------------------------------------------
    def StoreEnvData(self, argin):
        print >> self.log_info, "In ", self.get_name(), \
            "::StoreEnvData()"
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = int(self.__stg.storeEnvData(argin))
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

        return argout

#---- StoreEnvData command State Machine -----------------
    def is_StoreEnvData_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

#------------------------------------------------------------------
#    FetchEnvData command:
#
#    Description: Fetches ScanDir, ScanFile, ScanID and
#                 NeXusSelectorDevice
#                 in environment variables
#
#    argout: DevString    json dictionary with enviroutment data
#------------------------------------------------------------------
    def FetchEnvData(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::FetchEnvData()"
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = str(self.__stg.fetchEnvData())
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)
        return argout

#---- FetchEnvData command State Machine -----------------
    def is_FetchEnvData_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

#------------------------------------------------------------------
#    AvailableComponents command:
#
#    Description: Returns a list of available component names
#
#    argout: DevVarStringArray    list of available component names
#------------------------------------------------------------------
    def AvailableComponents(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::AvailableComponents()"
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.__stg.availableComponents()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

        return argout

#---- AvailableComponents command State Machine -----------------
    def is_AvailableComponents_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

#------------------------------------------------------------------
#    AvailableDataSources command:
#
#    Description: Returns a list of available DataSource names
#
#    argout: DevVarStringArray    list of available DataSource names
#------------------------------------------------------------------
    def AvailableDataSources(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::AvailableDataSources()"
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.__stg.availableDataSources()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

        return argout

#---- AvailableDataSources command State Machine -----------------
    def is_AvailableDataSources_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

#------------------------------------------------------------------
#    PoolChannels command:
#
#    Description: Returns a list of available pool channels
#
#    argout: DevVarStringArray    list of available pool channels
#------------------------------------------------------------------
    def PoolChannels(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::PoolChannels()"
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.__stg.poolChannels()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

        return argout

#---- PoolChannels command State Machine -----------------
    def is_PoolChannels_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

#------------------------------------------------------------------
#    PoolMotors command:
#
#    Description: Returns a list of available pool channels
#
#    argout: DevVarStringArray    list of available pool channels
#------------------------------------------------------------------
    def PoolMotors(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::PoolMotors()"
        #    Add your own code here
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.__stg.poolMotors()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)

        return argout

#---- PoolMotors command State Machine -----------------
    def is_PoolMotors_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

#------------------------------------------------------------------
#    MandatoryComponents command:
#
#    Description: Sets the mandatory components
#
#    argout: DevVarStringArray    component names
#------------------------------------------------------------------
    def MandatoryComponents(self):
        print >> self.log_info, "In ", self.get_name(), \
            "::MandatoryComponents()"
        #    Add your own code here

        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.__stg.mandatoryComponents()
            self.set_state(PyTango.DevState.ON)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.ON)
        return argout

#---- MandatoryComponents command State Machine -----------------
    def is_MandatoryComponents_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

#------------------------------------------------------------------
#    CreateDynamicComponent command:
#
#    Description: create dynamic component
#
#    argin:  DevVarStringArray    list of datasource parameters
#    argout: DevVarString         name of created dynamic component
#------------------------------------------------------------------
    def CreateDynamicComponent(self, argin):
        print >> self.log_info, "In ", self.get_name(), \
            "::CreateDynamicComponent()"
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.__stg.createDynamicComponent(argin)
            self.set_state(PyTango.DevState.OPEN)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.OPEN)

        return argout

#---- CreateDynamicComponent command State Machine -----------------
    def is_CreateDynamicComponent_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True

#------------------------------------------------------------------
#    RemoveDynamicComponent command:
#
#    Description: Deletes the given dynamic component
#
#    argin:  DevString  dynamic component name
#------------------------------------------------------------------
    def RemoveDynamicComponent(self, argin):
        print >> self.log_info, "In ", self.get_name(), \
            "::RemoveDynamicComponent()"
        #    Add your own code here
        try:
            self.set_state(PyTango.DevState.RUNNING)
            self.__stg.removeDynamicComponent(argin)
            self.set_state(PyTango.DevState.OPEN)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.OPEN)

#---- RemoveDynamicComponent command State Machine -----------------
    def is_RemoveDynamicComponent_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            return False
        return True

#------------------------------------------------------------------
#    ClientSources command:
#
#    Description: create dynamic component
#
#    argin:  DevVarStringArray    list of component names
#    argout: DevVarString         description of component datasources
#------------------------------------------------------------------
    def ClientSources(self, argin):
        print >> self.log_info, "In ", self.get_name(), \
            "::ClientSources()"
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.__stg.clientSources(argin)
            self.set_state(PyTango.DevState.OPEN)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.OPEN)

        return argout

#---- ClientSources command State Machine -----------------
    def is_ClientSources_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True

#------------------------------------------------------------------
#    CreateConfiguration command:
#
#    Description: create configuration from the given components
#
#    argin:  DevVarStringArray    list of component names
#    argout: DevVarString         XML configuration string
#------------------------------------------------------------------
    def CreateConfiguration(self, argin):
        print >> self.log_info, "In ", self.get_name(), \
            "::CreateConfiguration()"
        try:
            self.set_state(PyTango.DevState.RUNNING)
            argout = self.__stg.createConfiguration(argin)
            self.set_state(PyTango.DevState.OPEN)
        finally:
            if self.get_state() == PyTango.DevState.RUNNING:
                self.set_state(PyTango.DevState.OPEN)

        return argout

#---- CreateConfiguration command State Machine -----------------
    def is_CreateConfiguration_allowed(self):
        if self.get_state() in [PyTango.DevState.RUNNING]:
            #    End of Generated Code
            #    Re-Start of Generated Code
            return False
        return True


#==================================================================
#
##    NXSRecSelectorClass class definition
#
#==================================================================
class NXSRecSelectorClass(PyTango.DeviceClass):

    ##    Class Properties
    class_property_list = {
        }

    ##    Device Properties
    device_property_list = {
       'PoolBlacklist':
           [PyTango.DevVarStringArray,
            "blacklist of pools",
            []],
        }

    ##    Command definitions
    cmd_list = {
        'DataSourcePath':
            [[PyTango.DevString, "datasource name"],
             [PyTango.DevString, "NeXus Path"]],
        'FindMntGrp':
            [[PyTango.DevString, "mntgrp alias"],
             [PyTango.DevString, "mntgrp fullname"]],
        'StoreEnvData':
            [[PyTango.DevString, "environment data"],
             [PyTango.DevLong, "scanID"]],
        'FetchEnvData':
            [[PyTango.DevVoid, ""],
             [PyTango.DevString, "environment data"]],
        'LoadConfiguration':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        'SaveConfiguration':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        'ImportMntGrp':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        'ImportAllEnv':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        'ExportAllEnv':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        'UpdateMntGrp':
            [[PyTango.DevVoid, ""],
             [PyTango.DevString, "configuration"]],
        'MntGrpConfiguration':
            [[PyTango.DevVoid, ""],
             [PyTango.DevString, " mntcrp configuration"]],
        'IsMntGrpChanged':
            [[PyTango.DevVoid, ""],
             [PyTango.DevBoolean, "true if mntgrp changed"]],
        'UpdateControllers':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        'UpdateConfigVariables':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVoid, ""]],
        'AvailableComponents':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVarStringArray,
              "list of available component names"]],
        'AvailableDataSources':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVarStringArray,
              "list of available DataSource names"]],
        'PoolChannels':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVarStringArray, "list of available pool channels"]],
        'PoolMotors':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVarStringArray, "list of available pool channels"]],
        'MandatoryComponents':
            [[PyTango.DevVoid, ""],
             [PyTango.DevVarStringArray, "component names"]],
        'CreateDynamicComponent':
            [[PyTango.DevVarStringArray,
              "list of JSON strings with datasource parameters"],
             [PyTango.DevString, "name of dynamic Component"]],
        'ClientSources':
            [[PyTango.DevVarStringArray, "list of required components"],
             [PyTango.DevString,
              "JSON with description of CLIENT Datasources"]],
        'CreateConfiguration':
            [[PyTango.DevVarStringArray, "list of required components"],
             [PyTango.DevString,
              "XML Settinges"]],
        'RemoveDynamicComponent':
            [[PyTango.DevString, "name of dynamic Component"],
             [PyTango.DevVoid, ""]],
        }

    ##    Attribute definitions
    attr_list = {
        'Components':
            [[PyTango.DevString,
            PyTango.SPECTRUM,
            PyTango.READ, 10000],
            {
                'label':"Selected Components",
                'description':"list of Selected Components",
            }],
        'STEPDataSources':
            [[PyTango.DevString,
            PyTango.SPECTRUM,
            PyTango.READ_WRITE, 10000],
            {
                'label':"list of datasources to be switched into step mode",
                'description':"list of datasources to be switched"
                + " into step mode",
            }],
        'Timer':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Timer",
                'description':"Timer and optionally extra timers",
#                'Memorized':"true",
            }],
        'ComponentGroup':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Components Group",
                'description':"JSON dict of Components for Selection",
#                'Memorized':"true",
                'Display level':PyTango.DispLevel.EXPERT,
            }],
        'AutomaticComponentGroup':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Automatic Components Group",
                'description':"JSON dict with selection of automatic "
                + "components",
#                'Memorized':"true",
                'Display level':PyTango.DispLevel.EXPERT,
            }],
        'AutomaticComponents':
            [[PyTango.DevString,
            PyTango.SPECTRUM,
            PyTango.READ, 10000],
            {
                'label':"Automatic Components",
                'description':"JSON list of automatic components",
            }],
        'OptionalComponents':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Optional Components Group",
                'description':"JSON list of optional components "
                + "available for automatic selection",
#                'Memorized':"true",
                'Display level':PyTango.DispLevel.EXPERT,
            }],
        'MntGrp':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':" Measurement Group",
                'description':" Measurement Group",
#                'Memorized':"true",
            }],
        'ScanDir':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Scan Directory",
                'description':"Scan Directory",
            }],
        'ScanID':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Scan ID",
                'description':"Scan ID",
            }],
        'ScanFile':
            [[PyTango.DevString,
            PyTango.SPECTRUM,
            PyTango.READ_WRITE, 50],
            {
                'label':"Scan File(s)",
                'description':"Scan File(s)",
            }],
        'ConfigDevice':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Configuration Device",
                'description':"Configuration device",
#                'Memorized':"true",
            }],
        'MacroServer':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label':"MacroServer",
                'description':"MacroServer",
            }],
        'Door':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Door",
                'description':"Door",
#                'Memorized':"true",
            }],
        'WriterDevice':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Writer Device",
                'description':"Writer device",
#                'Memorized':"true",
            }],
        'DataRecord':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Client Data Record",
                'description':"JSON dictionary with Client Data Record",
#                'Memorized':"true",
                'Display level':PyTango.DispLevel.EXPERT,
            }],
        'LabelPaths':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"NeXus Paths for DataSource Labels",
                'description':"JSON dictionary with NeXus Paths for "
                + "Datasource Labels",
#                'Memorized':"true",
                'Display level':PyTango.DispLevel.EXPERT,
            }],
        'LabelTypes':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"NeXus Types for DataSource Labels",
                'description':"JSON dictionary with NeXus Types for "
                + "Datasource Labels",
#                'Memorized':"true",
                'Display level':PyTango.DispLevel.EXPERT,
            }],
        'LabelShapes':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"NeXus Shapes for DataSource Labels",
                'description':"JSON dictionary with NeXus Shapes for "
                + "Datasource Labels",
#                'Memorized':"true",
                'Display level':PyTango.DispLevel.EXPERT,
            }],
        'LabelLinks':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"NeXus Links for DataSource Labels",
                'description':"JSON dictionary with NeXus Links for "
                + "Datasource Labels",
#                'Memorized':"true",
                'Display level':PyTango.DispLevel.EXPERT,
            }],
        'HiddenElements':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Not displayed elements",
                'description':"JSON list with not displayed Elements"
                + "Labels",
#                'Memorized':"true",
                'Display level':PyTango.DispLevel.EXPERT,
            }],
        'Labels':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Element Labels",
                'description':"JSON dictionary with Element Labels",
#                'Memorized':"true",
                'Display level':PyTango.DispLevel.EXPERT,
            }],
        'DataSources':
            [[PyTango.DevString,
            PyTango.SPECTRUM,
            PyTango.READ, 10000],
            {
                'label':"Selected Datasources",
                'description':"list of Selected Datasources",
            }],
        'AvailableTimers':
            [[PyTango.DevString,
            PyTango.SPECTRUM,
            PyTango.READ, 10000],
            {
                'label':"Available Timers",
                'description':"list of Available Timers",
            }],
        'Description':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label':"Dependences descrition",
                'description':"Dependences descrition of Components and "
                + "Datasources",
                'Display level':PyTango.DispLevel.EXPERT,
            }],
        'VariableComponents':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label':" Variable Components",
                'description':"JSON Dictionary with Variables for "
                + " all  available Components ",
                'Display level':PyTango.DispLevel.EXPERT,
            }],
        'FullDeviceNames':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label':" Full device names",
                'description':"JSON Dictionary with full device names for "
                + " all aliases ",
                'Display level':PyTango.DispLevel.EXPERT,
            }],
        'Configuration':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"configuration",
                'description':"JSON dict of server configuration",
                'Memorized':"true",
                'Display level':PyTango.DispLevel.EXPERT,
            }],
        'DataSourceGroup':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Datasources Group",
                'description':"JSON dict of DataSources for selection",
#                'Memorized':"true",
                'Display level':PyTango.DispLevel.EXPERT,
            }],
        'AutomaticDataSources':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Automatic DataSources",
                'description':"JSON list of Automatic DataSources",
#                'Memorized':"true",
                'Display level':PyTango.DispLevel.EXPERT,
            }],
        'DisableDataSources':
            [[PyTango.DevString,
            PyTango.SPECTRUM,
            PyTango.READ, 10000],
            {
                'label':"Disable DataSources",
                'description':"list of Disable DataSources",
            }],
        'AppendEntry':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Append Entry",
                'description':"flag for entry  appending ",
#                'Memorized':"true",
            }],
        'ComponentsFromMntGrp':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Select Components from MntGrp",
                'description':"select components from mntgrp",
#                'Memorized':"true",
            }],
        'DynamicComponents':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Dynamic Components",
                'description':"create dynamic components",
#                'Memorized':"true",
            }],
        'DynamicLinks':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Links for Dynamic Components",
                'description':"create links for dynamic components",
#                'Memorized':"true",
            }],
        'DynamicPath':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Path for Dynamic Components",
                'description':"path for dynamic components",
#                'Memorized':"true",
                'Display level':PyTango.DispLevel.EXPERT,
            }],
        'ConfigVariables':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Configuration Variables",
                'description':"JSON dictionary with configuration variables"
                + "for templated components",
#                'Memorized':"true",
                'Display level':PyTango.DispLevel.EXPERT,
            }],
        'ConfigFile':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Config File with its Path",
                'description':"config file with its full path",
                'Memorized':"true",
            }],
        'TimeZone':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label':"Time Zone",
                'description':"timezone",
#                'Memorized':"true",
            }],
        }

#------------------------------------------------------------------
##    Nxsrecselectorclass Constructor
#------------------------------------------------------------------
    def __init__(self, name):
        PyTango.DeviceClass.__init__(self, name)
        self.set_type(name)
        print "In NXSRecSelectorClass  constructor"

#==================================================================
#
#    NXSRecSelector class main method
#
#==================================================================
if __name__ == '__main__':
    pass
